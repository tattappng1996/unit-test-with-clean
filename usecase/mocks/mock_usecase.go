// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/usecase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	usecase "unit-test-with-clean/usecase"
)

// MockUsecases is a mock of Usecases interface
type MockUsecases struct {
	ctrl     *gomock.Controller
	recorder *MockUsecasesMockRecorder
}

// MockUsecasesMockRecorder is the mock recorder for MockUsecases
type MockUsecasesMockRecorder struct {
	mock *MockUsecases
}

// NewMockUsecases creates a new mock instance
func NewMockUsecases(ctrl *gomock.Controller) *MockUsecases {
	mock := &MockUsecases{ctrl: ctrl}
	mock.recorder = &MockUsecasesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUsecases) EXPECT() *MockUsecasesMockRecorder {
	return m.recorder
}

// GetFirstCustomer mocks base method
func (m *MockUsecases) GetFirstCustomer(id int) (usecase.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirstCustomer", id)
	ret0, _ := ret[0].(usecase.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirstCustomer indicates an expected call of GetFirstCustomer
func (mr *MockUsecasesMockRecorder) GetFirstCustomer(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirstCustomer", reflect.TypeOf((*MockUsecases)(nil).GetFirstCustomer), id)
}

// MockCustomerRepository is a mock of CustomerRepository interface
type MockCustomerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerRepositoryMockRecorder
}

// MockCustomerRepositoryMockRecorder is the mock recorder for MockCustomerRepository
type MockCustomerRepositoryMockRecorder struct {
	mock *MockCustomerRepository
}

// NewMockCustomerRepository creates a new mock instance
func NewMockCustomerRepository(ctrl *gomock.Controller) *MockCustomerRepository {
	mock := &MockCustomerRepository{ctrl: ctrl}
	mock.recorder = &MockCustomerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCustomerRepository) EXPECT() *MockCustomerRepositoryMockRecorder {
	return m.recorder
}

// First mocks base method
func (m *MockCustomerRepository) First(id int) (usecase.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "First", id)
	ret0, _ := ret[0].(usecase.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// First indicates an expected call of First
func (mr *MockCustomerRepositoryMockRecorder) First(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "First", reflect.TypeOf((*MockCustomerRepository)(nil).First), id)
}
